#!/usr/bin/env node
const { resolve, extname } = require('path');
const { readFileSync, readdirSync } = require('fs');
const { gzipSync, brotliCompressSync } = require('zlib');
const { buildSync } = require('esbuild');
const { createProgram } = require('typescript');

function main() {
  const CWD = resolve(__dirname, '../');
  const outdir = resolve(CWD, 'dist');
  const resolveFiles = (dir) => readdirSync(resolve(CWD, dir));
  const entryPoints = resolveFiles('src').map(filename => resolve(CWD, 'src', filename));

  buildSync({
    format: 'esm',
    entryPoints,
    outdir,
    minify: true,
    sourcemap: true,
  });

  // Emit typings
  const { compilerOptions } = require('../tsconfig.json');
  const program = createProgram([
    resolve(CWD, 'src/index.ts'),
  ], { ...compilerOptions, emitDeclarationOnly: true });
  program.emit();

  // calculate sizes of the bundles
  // Interpolate numbers as kb of number
  const size = (value) => `${(value / 1024).toFixed(2)}kb`;
  for (const filename of resolveFiles(outdir).filter(x => extname(x) == '.mjs')) {
    try {
      const filePath = resolve(CWD, 'dist', filename);
      const file = readFileSync(filePath);
      const gzip = gzipSync(file).length;
      const brotli = brotliCompressSync(file).length;

      console.log(`${filename} production build: min: ${size(file.length)} / gzip: ${size(gzip)} / brotli: ${size(brotli)}`);
    } catch {}
  }
}

main();
