name: Test and Deploy
on:
  push:
    branches:
      - main
      - next
  pull_request:
    branches:
      - main

env:
  COVERAGE_OUTPUT: ./coverage/lcov.info
  CACHE_PATHS: |
    **/node_modules

jobs:
  # Setups testing environment on each version
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 18
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}#${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

  # Testing through Vitest
  test:
    name: Test
    needs: setup
    runs-on: ubuntu-latest

    steps:
      # Restore packages from cache
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 18
      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}#${{ hashFiles('package-lock.json') }}

      # Run TSC Lint
      - name: Lint TypeScript
        run: npm run lint

      # Run tests
      - name: Run Vitest
        run: npm run test:coverage

      # Upload coverage report to codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          flags: unittests
          file: ${{ env.COVERAGE_OUTPUT }}

  # Release verison if tests succeeded, (only for main branch)
  release:
    name: Publish
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Build types
        run: npm run build:types

      - name: Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
